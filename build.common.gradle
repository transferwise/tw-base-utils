import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

ext.projectGitHubRepoName = "tw-base-utils"
ext.projectScmUrl = "https://github.com/transferwise/${projectGitHubRepoName}"
ext.projectScmConnection = "scm:git:git://github.com/transferwise/${projectGitHubRepoName}.git"
ext.springBootVersion = "2.3.11.RELEASE"
ext.authorName = "Kristo Kuusk√ºl"
ext.authorGithub = "onukristo"
ext.authorEmail = "kristo.kuuskull@transferwise.com"

buildscript {
    repositories {
        maven { url 'https://arti.tw.ee/artifactory/libs-release' }
    }
}

apply plugin: "java-library"
apply plugin: "maven-publish"
apply plugin: "checkstyle"
apply plugin: "idea"
apply plugin: "com.github.spotbugs"
apply plugin: "groovy"
apply plugin: "signing"

group = "com.transferwise.common"

repositories {
    maven { url 'https://arti.tw.ee/artifactory/libs-release' }
}

dependencies {
    annotationProcessor(platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}"))
    compileOnly(platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}"))
    implementation(platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}"))
    testAnnotationProcessor(platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}"))

    annotationProcessor("org.projectlombok:lombok")

    compileOnly("org.projectlombok:lombok")

    testAnnotationProcessor("org.projectlombok:lombok")
    testImplementation("org.junit.jupiter:junit-jupiter")
    testImplementation("org.projectlombok:lombok")
    testImplementation 'ch.qos.logback:logback-classic'
    testImplementation 'org.assertj:assertj-core'
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    withSourcesJar()
    withJavadocJar()
}

jar {
    manifest {
        attributes(
                "Implementation-Title": "Transferwise Base Utils",
                "Implementation-Version": archiveVersion
        )
    }
}

compileJava {
    options.encoding = 'utf-8'
    options.compilerArgs << '-parameters'
    options.compilerArgs << '-Xlint'
    options.compilerArgs << '-Xlint:-processing'
}

compileTestJava {
    sourceCompatibility = JavaVersion.VERSION_15
    targetCompatibility = JavaVersion.VERSION_15
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(15)
    }
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			afterEvaluate {
				artifactId = projectArtifactName
			}

			pom {
				name = projectName
				description = projectDescription
				url = projectScmUrl
				packaging = "jar"
				licenses {
					license {
						name = 'The Apache License, Version 2.0, Copyright 2019 TransferWise Ltd'
						url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}
				developers {
					developer {
						id = authorGithub
						name = authorName
						email = authorEmail
						organization = "Transferwise Ltd"
						organizationUrl = "https://github.com/transferwise"
					}
				}
				scm {
					connection = projectScmConnection
					developerConnection = projectScmConnection
					url = projectScmUrl
				}
			}
		}
	}

	signing {
		def signingKey = System.env.OSS_SIGNING_KEY as String
		def signingPassword = System.env.OSS_SIGNING_PASSWORD as String

		if (signingKey && signingPassword) {
			useInMemoryPgpKeys(signingKey, signingPassword)
            sign publishing.publications.mavenJava
		}
	}

	repositories {
		maven {
			url System.env.MAVEN_URL as String
			credentials {
				username = System.env.MAVEN_USER as String
				password = System.env.MAVEN_PASSWORD as String
			}
		}
	}
}

test {
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(15)
    }

    testLogging {
        events TestLogEvent.STARTED, TestLogEvent.FAILED, TestLogEvent.SKIPPED, TestLogEvent.PASSED,
                TestLogEvent.STANDARD_ERROR
        showExceptions = true
        showStackTraces = true
        exceptionFormat = TestExceptionFormat.FULL
    }
}

tasks.findAll { it.name.startsWith("spotbugs") }*.configure {
    effort = "max"

    reports {
        xml.enabled false
        html.enabled true
    }
}

spotbugs {
    spotbugsTest.enabled = false
}

tasks.withType(Checkstyle) {
    config = resources.text.fromFile(file('google_checks.xml'))

    // Deprecated, checkstyle does not like the namings.
    exclude "com/transferwise/common/baseutils/tracing/**"

    maxWarnings = 0

    reports {
        xml.enabled false
        html.enabled true
    }
}

task addTag(type: Exec) {
    commandLine 'git', 'tag', "$project.name-$project.version", '-m', "$project.name-$project.version"
}
task pushTag(type: Exec) {
    commandLine 'git', 'push', 'origin', "$project.name-$project.version"
}

pushTag.dependsOn addTag
