import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

ext.projectGitHubRepoName = "tw-base-utils"
ext.projectScmUrl = "https://github.com/transferwise/${projectGitHubRepoName}"
ext.projectScmConnection = "scm:git:git://github.com/transferwise/${projectGitHubRepoName}.git"
ext.springBootVersion = "2.5.8"
ext.authorName = "Kristo Kuusk√ºl"
ext.authorGithub = "onukristo"
ext.authorEmail = "kristo.kuuskull@transferwise.com"

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }
}

apply plugin: "java-library"
apply plugin: "maven-publish"
apply plugin: "checkstyle"
apply plugin: "idea"
apply plugin: "com.github.spotbugs"
apply plugin: "groovy"
apply plugin: "signing"

group = "com.transferwise.common"

repositories {
    mavenCentral()
    mavenLocal()
}

configurations {
    local {
        canBeResolved(false)
        canBeConsumed(false)
    }
    compileClasspath {
        extendsFrom(local)
    }
    runtimeClasspath {
        extendsFrom(local)
    }
    testCompileClasspath {
        extendsFrom(local)
    }
    testRuntimeClasspath {
        extendsFrom(local)
    }
    annotationProcessor {
        extendsFrom(local)
    }
    testAnnotationProcessor {
        extendsFrom(local)
    }
}

dependencies {
    local(platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}"))

    annotationProcessor("org.projectlombok:lombok")

    compileOnly("org.projectlombok:lombok")

    testAnnotationProcessor("org.projectlombok:lombok")
    testImplementation("org.junit.jupiter:junit-jupiter")
    testImplementation("org.projectlombok:lombok")
    testImplementation 'ch.qos.logback:logback-classic'
    testImplementation 'org.assertj:assertj-core'
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    withSourcesJar()
    withJavadocJar()
}

jar {
    manifest {
        attributes(
                "Implementation-Title": "Transferwise Base Utils",
                "Implementation-Version": archiveVersion
        )
    }
}

compileJava {
    options.encoding = 'utf-8'
    options.compilerArgs << '-parameters'
    options.compilerArgs << '-Xlint'
    options.compilerArgs << '-Xlint:-processing'
}

compileTestJava {
    sourceCompatibility = JavaVersion.VERSION_15
    targetCompatibility = JavaVersion.VERSION_15
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(15)
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            afterEvaluate {
                artifactId = projectArtifactName
            }

            /*
             This ensures that libraries will have explicit dependency versions in their Maven POM and Gradle module files, so that there would be less
             ambiguity and less chances of dependency conflicts.
            */
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionOf('runtimeClasspath')
                }
            }

            pom {
                name = projectName
                description = projectDescription
                url = projectScmUrl
                packaging = "jar"
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0, Copyright 2019 TransferWise Ltd'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = authorGithub
                        name = authorName
                        email = authorEmail
                        organization = "Transferwise Ltd"
                        organizationUrl = "https://github.com/transferwise"
                    }
                }
                scm {
                    connection = projectScmConnection
                    developerConnection = projectScmConnection
                    url = projectScmUrl
                }
            }
        }
    }

    if (System.getenv("OSS_SIGNING_KEY")) {
        signing {
            useInMemoryPgpKeys(System.getenv("OSS_SIGNING_KEY"), System.getenv("OSS_SIGNING_PASSWORD"))
            sign publishing.publications.mavenJava
        }
    }

    repositories {
        maven {
            url System.getenv("MAVEN_URL")
            credentials {
                username = System.getenv("MAVEN_USER")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }
}

test {
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(15)
    }

    testLogging {
        events TestLogEvent.STARTED, TestLogEvent.FAILED, TestLogEvent.SKIPPED, TestLogEvent.PASSED,
                TestLogEvent.STANDARD_ERROR
        showExceptions = true
        showStackTraces = true
        exceptionFormat = TestExceptionFormat.FULL
    }
}

tasks.findAll { it.name.startsWith("spotbugs") }*.configure {
    effort = "max"

    excludeFilter = file('spotbugs-exclude.xml')

    reports {
        xml.required = true
        html.required = true
    }
}

spotbugs {
    spotbugsTest.enabled = false
}

tasks.withType(Checkstyle) {
    config = resources.text.fromFile(file('google_checks.xml'))

    // Deprecated, checkstyle does not like the namings.
    exclude "com/transferwise/common/baseutils/tracing/**"

    maxWarnings = 0

    reports {
        xml.required = true
        html.required = true
    }
}
