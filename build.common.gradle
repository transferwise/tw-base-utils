import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }
}

apply plugin: "java-library"
apply plugin: "checkstyle"
apply plugin: "idea"
apply plugin: "com.github.spotbugs"
apply plugin: "groovy"

apply from: "$rootProject.rootDir/build.libraries.gradle"

group = "com.transferwise.common"

repositories {
    mavenCentral()
    mavenLocal()
}

configurations {
    local {
        canBeResolved(false)
        canBeConsumed(false)
    }
    compileClasspath {
        extendsFrom(local)
    }
    runtimeClasspath {
        extendsFrom(local)
    }
    testCompileClasspath {
        extendsFrom(local)
    }
    testRuntimeClasspath {
        extendsFrom(local)
    }
    annotationProcessor {
        extendsFrom(local)
    }
    testAnnotationProcessor {
        extendsFrom(local)
    }

    all {
        resolutionStrategy {
            eachDependency { DependencyResolveDetails details ->

                // We need to fix those version in place, so we get only `javax` or `jakarta` packages in each.
                if (details.requested.group == "javax.validation" && details.requested.name == 'validation-api') {
                    details.useVersion('2.0.1.Final')
                } else if (details.requested.group == "jakarta.validation" && details.requested.name == 'jakarta.validation-api') {
                    details.useVersion('3.0.2')
                }
            }
        }
    }
}

dependencies {
    local(platform(libraries.springBootDependencies))

    local(libraries.lombok)

    compileOnly libraries.spotbugsAnnotations
}

java {
    if (springBootVersion.startsWith("3.")) {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    else{
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }
    withSourcesJar()
    withJavadocJar()
}

jar {
    manifest {
        attributes(
                "Implementation-Title": "Transferwise Base Utils",
                "Implementation-Version": archiveVersion
        )
    }
}

compileJava {
    options.encoding = 'utf-8'
    options.compilerArgs << '-parameters'
    options.compilerArgs << '-Xlint'
    options.compilerArgs << '-Xlint:-processing'

    options.fork = true
    options.forkOptions.jvmArgs << '-Xmx256m'
}

compileTestJava {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(17)
    }

    options.fork = true
    options.forkOptions.jvmArgs << '-Xmx256m'
}

test {
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(17)
    }

    useJUnitPlatform()

    testLogging {
        events TestLogEvent.STARTED, TestLogEvent.FAILED, TestLogEvent.SKIPPED, TestLogEvent.PASSED,
                TestLogEvent.STANDARD_ERROR
        showExceptions = true
        showStackTraces = true
        exceptionFormat = TestExceptionFormat.FULL
    }
}

tasks.findAll { it.name.startsWith("spotbugs") }*.configure {
    effort = "max"

    excludeFilter = file("$rootProject.rootDir/spotbugs-exclude.xml")

    reports {
        xml.required = true
        html.required = true
    }
}

spotbugs {
    spotbugsTest.enabled = false
}

tasks.withType(Checkstyle) {
    config = resources.text.fromFile(file("$rootProject.rootDir/google_checks.xml"))

    // Deprecated, checkstyle does not like the namings.
    exclude "com/transferwise/common/baseutils/tracing/**"

    maxWarnings = 0

    reports {
        xml.required = true
        html.required = true
    }
}
