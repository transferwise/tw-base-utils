import org.eclipse.jgit.api.errors.RefAlreadyExistsException

plugins {
    id "com.github.spotbugs" version "5.0.13"
    id "idea"
    id 'org.ajoberstar.grgit' version '5.0.0'
    id 'io.github.gradle-nexus.publish-plugin' version "1.1.0"
}

idea.project {
    vcs = 'Git'
    languageLevel = JavaVersion.VERSION_11
    targetBytecodeVersion = JavaVersion.VERSION_11
}

ext.projectName = "TransferWise Base Utils"
ext.projectDescription = "TransferWise Base Utils"
ext.projectArtifactName = "tw-base-utils"

apply from: 'build.common.gradle'

dependencies {
    compileOnly 'org.springframework.boot:spring-boot-starter'
    compileOnly 'org.springframework:spring-tx'
    compileOnly 'com.github.spotbugs:spotbugs-annotations:4.7.3'
    compileOnly 'io.micrometer:micrometer-core'

    implementation 'org.slf4j:slf4j-api'
    implementation 'org.apache.commons:commons-lang3'

    testImplementation 'junit:junit'
    testImplementation 'org.spockframework:spock-core:2.3-groovy-3.0'
    testImplementation 'org.awaitility:awaitility:4.2.0'
    testImplementation 'io.micrometer:micrometer-core'
    testImplementation 'org.assertj:assertj-core'
}

test {
    useJUnitPlatform()
}

task tagRelease {
    doLast {
        try {
            grgit.tag.add {
                name = "v$version"
                message = "Release of ${version}"
            }
            grgit.push(refsOrSpecs: ["v$version"])
        }
        catch (RefAlreadyExistsException ignored) {
            logger.warn("Tag v$version already exists.")
        }
    }
}

group = "com.transferwise.common"

nexusPublishing {
    repositories {
        sonatype {
            username = System.getenv("SONATYPE_USER")
            password = System.getenv("SONATYPE_PASSWORD")
        }
    }
}